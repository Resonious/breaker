// Generated by LiveScript 1.3.0
(function(){
  var Block, BasicBlock, SteelBlock, slice$ = [].slice;
  this.Block = Block = (function(superclass){
    var prototype = extend$((import$(Block, superclass).displayName = 'Block', Block), superclass).prototype, constructor = Block;
    prototype.isBlock = true;
    prototype.gravity = 700;
    function Block(spritesheet, game, core, x, y){
      var x$, this$ = this instanceof ctor$ ? this : new ctor$;
      Block.superclass.call(this$, game, x, y, spritesheet);
      this$.spritesheet = spritesheet;
      this$.core = core;
      game.physics.arcade.enable(this$);
      this$.anchor.setTo(0.5, 0.5);
      x$ = this$.body;
      x$.bounce.y = 0.0;
      x$.bounce.x = 0.3;
      x$.gravity.y = this$.gravity;
      x$.collideWorldBounds = false;
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    prototype.takeDamage = function(dmg){
      if (this.dying) {
        return;
      }
      this.animations.frame += dmg || 1;
      if (this.animations.frame >= this.damageFrames) {
        if (this.maxFrame) {
          this.animations.frame = this.maxFrame;
        }
        if (this.dead) {
          this.dead();
        }
        return false;
      } else {
        return true;
      }
    };
    prototype.deathEmitter = function(frames){
      var x$;
      x$ = this.game.add.emitter(0, 0, 20);
      x$.makeParticles(this.spritesheet, frames);
      x$.gravity = 200;
      return x$;
    };
    prototype.punched = function(fist, dmg){
      if (fist) {
        this.body.velocity.x += 135 * -fist.player.direction;
      }
      this.body.velocity.y -= 100;
      if (this.takeDamage(dmg)) {
        return this.hitSound.play('', 0, 1, false);
      } else {
        if (this.playHitSoundOnDeath) {
          this.hitSound.play('', 0, 1, false);
        }
        if (fist) {
          fist.player.score += this.scoreWorth;
        }
        return this.core.score();
      }
    };
    prototype.dead = function(){
      var x$;
      if (this.dying) {
        return;
      }
      this.dying = true;
      this.visible = false;
      this.body.enable = false;
      x$ = this.emitter;
      x$.maxParticleSpeed.setTo(100, 500);
      x$.maxRotation *= 2;
      x$.x = this.body.position.x + 32;
      x$.y = this.body.position.y + 32;
      x$.start(true, 500, null, 5);
      this.game.time.events.add(500, this.die, this);
      return this.breakSound.play('', 0, 1, false);
    };
    prototype.die = function(){
      if (this.emitter) {
        this.emitter.destroy();
      }
      return this.destroy();
    };
    prototype.update = function(){
      var delta, velocity;
      delta = this.game.time.physicsElapsed;
      velocity = this.body.velocity;
      velocity.x = towards(velocity.x, 0, 3000 * delta);
      if (this.body.touching.down) {
        this.body.gravity.y = 0;
      } else {
        this.body.gravity.y = this.gravity;
      }
    };
    return Block;
  }(Phaser.Sprite));
  this.BasicBlock = BasicBlock = (function(superclass){
    var prototype = extend$((import$(BasicBlock, superclass).displayName = 'BasicBlock', BasicBlock), superclass).prototype, constructor = BasicBlock;
    prototype.damageFrames = 3;
    prototype.scoreWorth = 1;
    function BasicBlock(){
      var args, this$ = this instanceof ctor$ ? this : new ctor$;
      args = slice$.call(arguments);
      BasicBlock.superclass.apply(this$, ['basic-block'].concat(slice$.call(args)));
      this$.hitSound = this$.game.add.audio('box-hit');
      this$.breakSound = this$.game.add.audio('box-break');
      this$.emitter = this$.deathEmitter([3, 4, 5]);
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    return BasicBlock;
  }(Block));
  this.SteelBlock = SteelBlock = (function(superclass){
    var prototype = extend$((import$(SteelBlock, superclass).displayName = 'SteelBlock', SteelBlock), superclass).prototype, constructor = SteelBlock;
    SteelBlock.rerollChance = 90;
    prototype.damageFrames = 22;
    prototype.scoreWorth = 25;
    prototype.playHitSoundOnDeath = true;
    function SteelBlock(){
      var args, this$ = this instanceof ctor$ ? this : new ctor$;
      args = slice$.call(arguments);
      SteelBlock.superclass.apply(this$, ['steel-block'].concat(slice$.call(args)));
      this$.hitSound = this$.game.add.audio('steel-hit');
      this$.breakSound = this$.game.add.audio('steel-break');
      this$.emitter = this$.deathEmitter([3, 4, 5]);
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    return SteelBlock;
  }(Block));
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
