// Generated by LiveScript 1.3.0
(function(){
  var Block, BasicBlock, slice$ = [].slice;
  this.Block = Block = (function(superclass){
    var prototype = extend$((import$(Block, superclass).displayName = 'Block', Block), superclass).prototype, constructor = Block;
    prototype.isBlock = true;
    function Block(spritesheet, game, core, x, y){
      var x$, this$ = this instanceof ctor$ ? this : new ctor$;
      console.log("sprite sheet is " + spritesheet);
      Block.superclass.call(this$, game, x, y, spritesheet);
      this$.core = core;
      game.physics.arcade.enable(this$);
      this$.anchor.setTo(0.5, 0.5);
      x$ = this$.body;
      x$.bounce.y = 0.1;
      x$.bounce.x = 0.3;
      x$.gravity.y = 2000;
      x$.collideWorldBounds = false;
      if (this$.initialize) {
        this$.initialize();
      }
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    return Block;
  }(Phaser.Sprite));
  this.BasicBlock = BasicBlock = (function(superclass){
    var prototype = extend$((import$(BasicBlock, superclass).displayName = 'BasicBlock', BasicBlock), superclass).prototype, constructor = BasicBlock;
    function BasicBlock(){
      var args, this$ = this instanceof ctor$ ? this : new ctor$;
      args = slice$.call(arguments);
      BasicBlock.superclass.apply(this$, ['basic-block'].concat(slice$.call(args)));
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    return BasicBlock;
  }(Block));
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
