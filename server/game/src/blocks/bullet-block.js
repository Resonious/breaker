// Generated by LiveScript 1.3.0
(function(){
  var Bullet, BulletBlock, slice$ = [].slice;
  Bullet = (function(superclass){
    var prototype = extend$((import$(Bullet, superclass).displayName = 'Bullet', Bullet), superclass).prototype, constructor = Bullet;
    prototype.scoreWorth = 1;
    function Bullet(game, x, y, direction){
      var x$, this$ = this instanceof ctor$ ? this : new ctor$;
      Bullet.superclass.call(this$, game, x, y, 'bullet-block');
      game.physics.arcade.enable(this$);
      this$.anchor.setTo(0.5, 0.5);
      x$ = this$.body;
      x$.setSize(16, 16);
      x$.velocity.x = 500 * direction;
      this$.checkWorldBounds = true;
      this$.events.onOutOfBounds.add(this$.dead, this$);
      this$.animations.frame = 7;
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    prototype.onCollide = function(plr){
      plr.die();
      return this.dead();
    };
    prototype.onBlockCollide = function(block){
      block.punched();
      return this.dead();
    };
    prototype.punched = function(fist){
      return this.dead();
    };
    prototype.dead = function(){
      return this.exists = false;
    };
    return Bullet;
  }(Phaser.Sprite));
  this.BulletBlock = BulletBlock = (function(superclass){
    var prototype = extend$((import$(BulletBlock, superclass).displayName = 'BulletBlock', BulletBlock), superclass).prototype, constructor = BulletBlock;
    prototype.damageFrames = 5;
    prototype.scoreWorth = 2;
    prototype.bulletTimer = 5.0;
    function BulletBlock(){
      var args, x$, scales, this$ = this instanceof ctor$ ? this : new ctor$;
      args = slice$.call(arguments);
      BulletBlock.superclass.apply(this$, ['bullet-block'].concat(slice$.call(args)));
      this$.hitSound = this$.game.add.audio('box-hit');
      this$.breakSound = this$.game.add.audio('box-break');
      this$.emitter = this$.deathEmitter([5, 6]);
      x$ = this$.laserEye = this$.addChild(new Phaser.Sprite(this$.game, 0, 0, 'bullet-block'));
      x$.anchor.setTo(0.5, 0.5);
      x$.x = 0;
      x$.y = 0;
      x$.animations.frame = 8;
      x$.alpha = 0;
      scales = [-1, 1];
      this$.scale.x = scales[this$.game.rnd.integerInRange(0, 1)];
      this$.shootSound = this$.game.add.audio('box-shoot');
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    prototype.bullet = function(){
      var x, y;
      x = this.x + 16 * this.scale.x;
      y = this.y;
      return new Bullet(this.game, x, y, this.scale.x);
    };
    prototype.update = function(){
      var delta;
      superclass.prototype.update.call(this);
      delta = this.game.time.physicsElapsed;
      this.bulletTimer -= delta;
      this.laserEye.alpha = 1 - this.bulletTimer / 5.5;
      if (this.bulletTimer <= 0) {
        this.shootSound.play('', 0, 1, false);
        this.core.blocks.add(this.bullet());
        this.bulletTimer = 5.5;
      }
    };
    return BulletBlock;
  }(Block));
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
