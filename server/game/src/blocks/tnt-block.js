// Generated by LiveScript 1.3.0
(function(){
  var TntBlock, slice$ = [].slice;
  this.TntBlock = TntBlock = (function(superclass){
    var prototype = extend$((import$(TntBlock, superclass).displayName = 'TntBlock', TntBlock), superclass).prototype, constructor = TntBlock;
    prototype.damageFrames = 3;
    prototype.scoreWorth = 2;
    prototype.playHitSoundOnDeath = true;
    prototype.deathTimer = 1.0;
    prototype.countdownNum = 3;
    function TntBlock(){
      var args, this$ = this instanceof ctor$ ? this : new ctor$;
      args = slice$.call(arguments);
      TntBlock.superclass.apply(this$, ['tnt-block'].concat(slice$.call(args)));
      this$.hitSound = this$.game.add.audio('box-hit');
      this$.emitter = this$.deathEmitter([3, 4, 5]);
      this$.countdown = new Phaser.Text(this$.game, 0, 0, '3', {
        font: '28px Monaco',
        fill: '#FFFFFF',
        align: 'center'
      });
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    prototype.dead = function(){
      if (this.dying) {
        return;
      }
      this.dying = true;
      this.animations.frame -= 1;
      this.addChild(this.countdown);
      this.countdown.x -= 8;
      return this.countdown.y -= 16;
    };
    prototype.update = function(){
      var delta, x$;
      superclass.prototype.update.call(this);
      if (!this.dying) {
        return;
      }
      if (this.countdownNum === -1) {
        return;
      }
      delta = this.game.time.physicsElapsed;
      this.deathTimer -= delta;
      if (this.deathTimer <= 0) {
        this.deathTimer = 1.0;
        this.countdownNum -= 1;
        if (this.countdownNum === -1) {
          console.log('BOOM!!!!!!!!!!!!!!!!!!');
          this.visible = false;
          this.body.enable = false;
          x$ = this.emitter;
          x$.maxParticleSpeed.setTo(100, 500);
          x$.maxRotation *= 2;
          x$.x = this.x;
          x$.y = this.y;
          x$.start(true, 500, null, 5);
          return this.game.time.events.add(500, this.die, this);
        } else {
          return this.countdown.text = this.countdownNum + "";
        }
      }
    };
    return TntBlock;
  }(Block));
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
