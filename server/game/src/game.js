// Generated by LiveScript 1.3.0
(function(){
  var ref$, each, all, map, GameCore;
  ref$ = require('prelude-ls'), each = ref$.each, all = ref$.all, map = ref$.map;
  this.GameCore = GameCore = (function(){
    GameCore.displayName = 'GameCore';
    var prototype = GameCore.prototype, constructor = GameCore;
    function GameCore(game){
      this.game = game;
    }
    prototype.preload = function(){
      var asset, x$;
      asset = function(p){
        return "game/assets/" + p;
      };
      x$ = this.game.load;
      x$.spritesheet('breaker', asset('breaker.png'), 64, 64);
      x$.image('basic-tile', asset('better-basic-tile.png'));
      x$.image('bg', asset('bg.png'));
      x$.spritesheet('stars', asset('stars.png'), 8, 8);
      x$.spritesheet('explosion', asset('explosion.png'), 192, 192);
      x$.spritesheet('power-up', asset('power-up.png'), 32, 32);
      x$.tilemap('map', asset('map/basic-map.json'), null, Phaser.Tilemap.TILED_JSON);
      x$.image('smoke', asset('smoke-cloud.png'));
      x$.audio('punch-sound', asset('sounds/punch.wav'));
      x$.audio('dead-sound', asset('sounds/dead.ogg'));
      x$.audio('box-hit', asset('sounds/box-hit.wav'));
      x$.audio('box-break', asset('sounds/box-break.wav'));
      x$.audio('box-shoot', asset('sounds/bullet-shoot.wav'));
      x$.audio('chest-hit', asset('sounds/chest-hit.wav'));
      x$.audio('chest-break', asset('sounds/chest-break.wav'));
      x$.audio('boom', asset('sounds/explosion.wav'));
      x$.audio('beep', asset('sounds/beep.wav'));
      x$.audio('charge-up', asset('sounds/charge-up.wav'));
      x$.audio('charge-down', asset('sounds/charge-down.wav'));
      x$.audio('blast-off', asset('sounds/blast-off.wav'));
      x$.audio('bgm', asset('bgm.ogg'));
      x$.spritesheet('basic-block', asset('blocks/basic.png'), 64, 64);
      x$.spritesheet('bullet-block', asset('blocks/bullet.png'), 64, 64);
      x$.spritesheet('tnt-block', asset('blocks/tnt.png'), 64, 64);
      x$.spritesheet('chest-block', asset('blocks/chest.png'), 64, 64);
    };
    prototype.create = function(){
      (function(add, physics, world, camera){
        var x$, y$, z$, map, z1$, z2$, z3$, this$ = this;
        this.deathSound = add.audio('dead-sound');
        x$ = this.bgm = add.audio('bgm');
        x$.play('', 0, 1, true);
        this.game.stage.backgroundColor = '#1B03E38';
        y$ = add.emitter(this.game.world.centerX, 200, 200);
        y$.width = 800;
        y$.makeParticles('stars', [0, 1, 2, 3, 4, 5, 6]);
        y$.minParticleSpeed.set(0, 0);
        y$.maxParticleSpeed.set(0, 400);
        y$.y = 0;
        y$.start(false, 3000, 80);
        add.image(0, 0, 'bg');
        this.game.time.advancedTiming = true;
        physics.startSystem(Phaser.Physics.Arcade);
        physics.arcade.TILE_BIAS = 32;
        physics.arcade.OVERLAP_BIAS = 32;
        z$ = map = add.tilemap('map');
        z$.addTilesetImage('basic', 'basic-tile');
        z$.setCollision(1);
        z1$ = this.layer = map.createLayer('Tile Layer 1');
        z1$.resizeWorld();
        this.arrowKeys = this.game.input.keyboard.createCursorKeys();
        this.punchKey = this.game.input.keyboard.addKey(Phaser.Keyboard.Z);
        this.specialKey = this.game.input.keyboard.addKey(Phaser.Keyboard.X);
        z2$ = this.player = add.existing(new Player(this.game, this, 400, 500));
        z2$.keys = this.arrowKeys;
        z2$.punchKey = this.punchKey;
        z2$.specialKey = this.specialKey;
        z2$.initializeSmoke();
        this.blocks = add.group();
        this.powerUps = add.group();
        this.blockInterval = 2;
        this.blockTimer = this.blockInterval;
        this.chestBlockIn = 5;
        this.scoreText = add.text(40, 5, 'Score: 0', {
          font: '24px Arial',
          fill: '#000000',
          align: 'center'
        });
        z3$ = this.game.input.keyboard.addKey(Phaser.Keyboard.D);
        z3$.onDown.add(function(){
          return this$.addPowerUp(PowerUp, 400, 450);
        });
      }.call(this, this.game.add, this.game.physics, this.game.world, this.game.camera));
    };
    prototype.score = function(){
      return this.scoreText.text = "Score: " + this.player.score;
    };
    prototype.addPowerUp = function(type, x, y){
      return this.powerUps.add(new type(this.game, this, x, y));
    };
    prototype.addBlock = function(type, x, y){
      return this.blocks.add(new type(this.game, this, x, y));
    };
    prototype.punch = function(fist){
      var x$;
      x$ = this.game.physics.arcade;
      x$.collide(fist, this.blocks, null, function(_, block){
        if (block.punched) {
          block.punched(fist, fist.player.spinning() ? 2 : 1);
        }
        return false;
      });
    };
    prototype.update = function(){
      var plrBlkCollide, x$, y$, delta, chest;
      if (!this.player.dying) {
        plrBlkCollide = function(plr, blck){
          if (blck.onCollide) {
            blck.onCollide(plr);
          }
          return plr.onCollide(blck);
        };
        x$ = this.game.physics.arcade;
        x$.collide(this.player, this.layer);
        x$.collide(this.player, this.blocks, plrBlkCollide, this.player.blockCollideTest, x$.collide(this.player, this.powerUps, null, function(plr, pwr){
          pwr.pickedUp(plr);
          return false;
        }));
      }
      y$ = this.game.physics.arcade;
      y$.collide(this.blocks, this.layer, null, function(b, l){
        if (b.testLayerCollision) {
          return b.testLayerCollision(l);
        } else {
          return b.isBlock;
        }
      });
      y$.collide(this.blocks, this.blocks, function(b1, b2){
        if (b1.onBlockCollide) {
          b1.onBlockCollide(b2);
        }
        if (b2.onBlockCollide) {
          return b2.onBlockCollide(b1);
        }
      });
      delta = this.game.time.physicsElapsed;
      this.blockTimer -= delta;
      if (this.blockTimer <= 0) {
        this.chestBlockIn -= 1;
        chest = null;
        if (this.chestBlockIn <= 0) {
          chest = ChestBlock;
          this.chestBlockIn = 20;
        }
        this.generateBlock(this.game.rnd, chest);
        this.blockTimer = this.blockInterval;
        if (!(this.blockTimer <= 0.7)) {
          this.blockInterval *= 0.85;
        } else if (this.blockInterval > 0.5) {
          this.blockInterval -= 0.001;
        }
      }
    };
    prototype.generateBlock = function(rnd, useThisOne){
      var possibleBlocks, blockIndex, nextBlockX, block, chance;
      possibleBlocks = [BasicBlock, BulletBlock, TntBlock];
      blockIndex = rnd.integerInRange(0, possibleBlocks.length - 1);
      nextBlockX = rnd.integerInRange(1, 800 / 64 - 2);
      block = useThisOne || possibleBlocks[blockIndex];
      if (block.rerollChance) {
        chance = rnd.integerInRange(0, 100);
        if (chance < block.rerollChance) {
          return this.generateBlock(rnd);
        }
      }
      return this.addBlock(block, nextBlockX * 64, 0);
    };
    prototype.render = function(){};
    return GameCore;
  }());
}).call(this);
