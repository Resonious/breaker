// Generated by LiveScript 1.3.0
(function(){
  var ref$, each, all, map, GameCore;
  ref$ = require('prelude-ls'), each = ref$.each, all = ref$.all, map = ref$.map;
  this.GameCore = GameCore = (function(){
    GameCore.displayName = 'GameCore';
    var prototype = GameCore.prototype, constructor = GameCore;
    function GameCore(game){
      this.game = game;
    }
    prototype.preload = function(){
      var asset, x$;
      asset = function(p){
        return "game/assets/" + p;
      };
      x$ = this.game.load;
      x$.spritesheet('breaker', asset('breaker.png'), 64, 64);
      x$.image('basic-tile', asset('better-basic-tile.png'));
      x$.tilemap('map', asset('map/basic-map.json'), null, Phaser.Tilemap.TILED_JSON);
      x$.image('smoke', asset('smoke-cloud.png'));
      x$.audio('punch-sound', asset('sounds/punch.wav'));
      x$.audio('bgm', asset('bgm.ogg'));
      x$.spritesheet('basic-block', asset('blocks/basic.png'), 64, 64);
    };
    prototype.create = function(){
      (function(add, physics, world, camera){
        var x$, y$, map, z$, z1$, z2$, this$ = this;
        x$ = this.bgm = add.audio('bgm');
        x$.play('', 0, 1, true);
        this.game.stage.backgroundColor = '#FFFFFF';
        this.game.time.advancedTiming = true;
        physics.startSystem(Phaser.Physics.Arcade);
        y$ = map = add.tilemap('map');
        y$.addTilesetImage('basic', 'basic-tile');
        y$.setCollision(1);
        z$ = this.layer = map.createLayer('Tile Layer 1');
        z$.resizeWorld();
        this.arrowKeys = this.game.input.keyboard.createCursorKeys();
        this.punchKey = this.game.input.keyboard.addKey(Phaser.Keyboard.Z);
        z1$ = this.player = add.existing(new Player(this.game, this, 400, 500));
        z1$.keys = this.arrowKeys;
        z1$.punchKey = this.punchKey;
        z1$.initializeSmoke();
        this.blocks = add.group();
        z2$ = this.game.input.keyboard.addKey(Phaser.Keyboard.D);
        z2$.onDown.add(function(){
          return this$.addBlock(BasicBlock, 300, 0);
        });
      }.call(this, this.game.add, this.game.physics, this.game.world, this.game.camera));
    };
    prototype.addBlock = function(type, x, y){
      return this.blocks.add(type(this.game, this, x, y));
    };
    prototype.punch = function(fist){
      var x$;
      x$ = this.game.physics.arcade;
      x$.collide(fist, this.blocks, null, function(_, block){
        console.log('BAM');
        return false;
      });
    };
    prototype.update = function(){
      var x$;
      x$ = this.game.physics.arcade;
      x$.collide(this.player, this.layer);
      x$.collide(this.blocks, this.layer);
      x$.collide(this.player, this.blocks, function(plr, blck){
        if (blck.onCollide) {
          return blck.onCollide(plr);
        }
      });
    };
    prototype.render = function(){};
    return GameCore;
  }());
}).call(this);
