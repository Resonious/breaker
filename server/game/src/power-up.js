// Generated by LiveScript 1.3.0
(function(){
  var PowerUp;
  this.PowerUp = PowerUp = (function(superclass){
    var prototype = extend$((import$(PowerUp, superclass).displayName = 'PowerUp', PowerUp), superclass).prototype, constructor = PowerUp;
    PowerUp.glow = function(game){
      var x$, s;
      x$ = s = new Phaser.Sprite(game, 0, 0, 'explosion');
      x$.anchor.setTo(0.5, 0.5);
      x$.x = 0;
      x$.y = 0;
      x$.animations.frame = 1;
      return x$;
    };
    PowerUp.effect = function(game){
      var x$, s;
      x$ = s = new Phaser.Sprite(game, 0, 0, 'power-up');
      x$.anchor.setTo(0.5, 0.5);
      x$.x = 0;
      x$.y = 0;
      x$.animations.add('blaze', [1, 2, 3, 2], 5, true);
      x$.play('blaze');
      return s;
    };
    function PowerUp(game, core, x, y){
      var x$, y$;
      PowerUp.superclass.call(this, game, x, y, 'power-up');
      game.physics.arcade.enable(this);
      this.anchor.setTo(0.5, 0.5);
      this.scale.setTo(2, 2);
      this.x = x;
      this.y = y;
      x$ = this.addChild(constructor.glow(game));
      x$.scale.setTo(0.4, 0.4);
      x$.alpha = 0.3;
      y$ = this.addChild(constructor.effect(game));
      y$.scale.setTo(2, 2);
      this.bringToTop();
    }
    prototype.pickedUp = function(player){
      var effect, x$;
      effect = constructor.effect(this.game);
      x$ = effect.glow = effect.addChild(constructor.glow(this.game));
      x$.scale.setTo(0.4, 0.4);
      x$.alpha = 0.1;
      effect.scale.setTo(2, 2);
      player.addPowerUp(effect, this.onUse, this.useUpdate, this.finish);
      return this.destroy();
    };
    prototype.onUse = function(player){
      var game, breakBlocks, gravityY, velocityX, x$, y$, blastOff, z$;
      game = player.game;
      this.chargeUp = game.add.audio('charge-up');
      this.blastOff = game.add.audio('blast-off');
      this.chargeDown = game.add.audio('charge-down');
      this.chargingUp = true;
      breakBlocks = function(me, block){
        if (block.punched) {
          block.punched(me.fist, 20);
        }
        return false;
      };
      gravityY = player.body.gravity.y;
      velocityX = player.body.velocity.x;
      x$ = player;
      x$.disableControls = true;
      x$.dontAdjustVelocity = true;
      x$.invincible = true;
      x$.blockCollideTest = breakBlocks;
      y$ = x$.body;
      y$.gravity.y = 0;
      y$.velocity.x = 0;
      y$.velocity.y = -50;
      blastOff = function(){
        var x$, y$;
        x$ = player.body;
        x$.gravity.y = gravityY;
        y$ = x$.velocity;
        y$.x = velocityX;
        y$.y = -900;
        this.blastOff.play('', 0, 1, false);
        return this.chargingUp = false;
      };
      this.chargeUp.play('', 0, 1, false);
      z$ = game.add.tween(player.powerUp.effect.glow);
      z$.to({
        alpha: 1
      }, 500, Phaser.Easing.Quadratic.None, true, 0, 0, false);
      z$.onComplete.add(blastOff, this);
      z$.start();
      return z$;
    };
    prototype.useUpdate = function(player){
      if (player.body.blocked.down && !this.chargingUp) {
        this.chargeDown.play('', 0, 1, false);
        return player.cancelPowerUp();
      }
    };
    prototype.finish = function(player){
      var x$;
      x$ = player;
      x$.disableControls = false;
      x$.dontAdjustVelocity = false;
      x$.blockCollideTest = undefined;
      return player.game.time.events.add(500, function(){
        return this.invincible = false;
      }, player);
    };
    return PowerUp;
  }(Phaser.Sprite));
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
